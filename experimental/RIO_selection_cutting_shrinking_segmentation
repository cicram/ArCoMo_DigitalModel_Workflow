import cv2
import numpy as np

# Variables for mouse event handling
drawing = False
points = []
drawing_spline = False

def on_mouse(event, x, y, flags, param):
    global drawing, points, drawing_spline

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        points.append((x, y))

    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        drawing_spline = True

    elif event == cv2.EVENT_MOUSEMOVE:
        if drawing:
            img_copy = img.copy()
            cv2.polylines(img_copy, [np.array(points + [(x, y)])], isClosed=False, color=(255, 255, 255), thickness=2)
            cv2.imshow('Image', img_copy)

# Read an image
img = cv2.imread('experimental/Test_live_wire.JPG')
cv2.namedWindow('Image')
cv2.setMouseCallback('Image', on_mouse)

while True:
    img_copy = img.copy()

    if drawing_spline:
        # Draw the spline
        if len(points) > 1:
            cv2.polylines(img_copy, [np.array(points)], isClosed=False, color=(255, 255, 255), thickness=2)

        # Shrink the selected region using erosion when 's' is pressed
        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):
            mask = np.zeros(img.shape[:2], np.uint8)
            pts = np.array([points], np.int32)
            pts = pts.reshape((-1, 1, 2))
            cv2.fillPoly(mask, [pts], 255)

            # Shrink the selected region using erosion
            kernel_size = 5
            kernel = np.ones((kernel_size, kernel_size), np.uint8)
            mask = cv2.erode(mask, kernel, iterations=1)

            img = cv2.bitwise_and(img, img, mask=mask)
            drawing_spline = False

    cv2.imshow('Image', img_copy)
    key = cv2.waitKey(1) & 0xFF

    if key == ord('q'):
        break

cv2.destroyAllWindows()



if False:
    import cv2
    import numpy as np

    # Variables for mouse event handling
    drawing = False
    rect = (0, 0, 0, 0)
    drawing_rect = False

    def on_mouse(event, x, y, flags, param):
        global drawing, rect, drawing_rect

        if event == cv2.EVENT_LBUTTONDOWN:
            drawing = True
            rect = (x, y, 1, 1)

        elif event == cv2.EVENT_LBUTTONUP:
            drawing = False
            drawing_rect = True

        elif event == cv2.EVENT_MOUSEMOVE:
            if drawing:
                rect = (rect[0], rect[1], x - rect[0], y - rect[1])

    # Read an image
    img = cv2.imread('experimental/Test_live_wire.JPG')
    cv2.namedWindow('Image')
    cv2.setMouseCallback('Image', on_mouse)

    while True:
        img_copy = img.copy()

        if drawing_rect:
            cv2.rectangle(img_copy, (rect[0], rect[1]), (rect[0] + rect[2], rect[1] + rect[3]), (255, 255, 255), 2)

        cv2.imshow('Image', img_copy)
        key = cv2.waitKey(1) & 0xFF

        if key == ord('q'):
            break
        elif key == ord('s') and drawing_rect:
            mask = np.zeros(img.shape[:2], np.uint8)
            bgd_model = np.zeros((1, 65), np.float64)
            fgd_model = np.zeros((1, 65), np.float64)

            rect = (min(rect[0], rect[0] + rect[2]), min(rect[1], rect[1] + rect[3]),
                    abs(rect[2]), abs(rect[3]))

            cv2.grabCut(img, mask, rect, bgd_model, fgd_model, 5, cv2.GC_INIT_WITH_RECT)

            mask2 = np.where((mask == 2) | (mask == 0), 0, 1).astype('uint8')
            img = img * mask2[:, :, np.newaxis]

            drawing_rect = False

    cv2.destroyAllWindows()
