import vtkmodules.all as vtk
import numpy as np

# ----------------------------------------------------------------------- #
# Data parsing #
# ----------------------------------------------------------------------- #

def parse_lumen_point_cloud(file_path):
    data = []
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            if len(parts) == 3:
                px, py, pz = float(parts[0]), float(parts[1]), float(parts[2])
                data.append((px, py, pz))
            else:
                print(f"Skipping invalid line: {line.strip()}")
    return np.array(data)

def parse_point_cloud_CT_lumen(file_path):
    data = []
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split()
            if len(parts) == 3:
                px, py, pz = float(parts[0]), float(parts[1]), float(parts[2])
                data.append((px, py, pz))
            else:
                print(f"Skipping invalid line: {line.strip()}")
    formatted_data = [' '.join(map(str, inner)) for inner in data]
    result = [list(map(float, inner.split())) for inner in formatted_data]
    return np.array(result)

file_path_2 = "phantom_data/noisy_downsampled_point_cloud.txt"
file_path_3 = "workflow_processed_data_output/saved_registered_splines.txt"
point_cloud1 = parse_point_cloud_CT_lumen(file_path_2)
point_cloud2 = parse_lumen_point_cloud(file_path_3)


# ----------------------------------------------------------------------- #
# Button creation helper functions #
# ----------------------------------------------------------------------- #

def CreateButtonOff(image):
    white = [155, 155, 155]
    CreateImage(image, white, white)

def CreateButtonOn(image):
    white = [155, 155, 155]
    blue = [20, 30, 155]
    CreateImage(image, white, blue)

def CreateImage(image, color1, color2):
    size = 12
    dims = [size, size, 1]
    lim = size / 3.0
    image.SetDimensions(dims[0], dims[1], dims[2])
    arr = vtk.vtkUnsignedCharArray()
    arr.SetNumberOfComponents(3)
    arr.SetNumberOfTuples(dims[0] * dims[1])
    arr.SetName('scalars')

    for y in range(dims[1]):
        for x in range(dims[0]):
            if x >= lim and x < 2 * lim and y >= lim and y < 2 * lim:
                arr.SetTuple3(y*size + x, color2[0], color2[1], color2[2])
            else:
                arr.SetTuple3(y*size + x, color1[0], color1[1], color1[2])

    image.GetPointData().AddArray(arr)
    image.GetPointData().SetActiveScalars('scalars')


# ----------------------------------------------------------------------- #
# Renderer set up #
# ----------------------------------------------------------------------- #

def create_point_cloud_actor(points, color):
    vtk_points = vtk.vtkPoints()
    vtk_cells = vtk.vtkCellArray()

    for point in points:
        vtk_id = vtk_points.InsertNextPoint(point)
        vtk_cells.InsertNextCell(1)
        vtk_cells.InsertCellPoint(vtk_id)

    poly_data = vtk.vtkPolyData()
    poly_data.SetPoints(vtk_points)
    poly_data.SetVerts(vtk_cells)

    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputData(poly_data)

    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    actor.GetProperty().SetColor(color)

    return actor

render_window = vtk.vtkRenderWindow()
render_window.SetFullScreen(True)  # Set the window to be fullscreen
style = vtk.vtkInteractorStyleTrackballCamera()
render_window_interactor = vtk.vtkRenderWindowInteractor()
render_window_interactor.SetInteractorStyle(style)
render_window_interactor.SetRenderWindow(render_window)
style.AddObserver("RightButtonPressEvent", lambda obj, event: point_pick_callback(obj, event))
render_window_interactor.SetInteractorStyle(style)

actor1 = create_point_cloud_actor(point_cloud1, [1, 0, 0])
actor2 = create_point_cloud_actor(point_cloud2, [0, 0, 1])
actor1.GetProperty().SetPointSize(5)
actor2.GetProperty().SetPointSize(5)

renderer = vtk.vtkRenderer()
renderer.AddActor(actor1)
renderer.AddActor(actor2)
renderer.SetBackground(1.0, 1.0, 1.0)

render_window.AddRenderer(renderer)
render_window.SetWindowName("VTK Point Cloud Selection")

point_picker = vtk.vtkPointPicker()
render_window_interactor.SetPicker(point_picker)

selected_points_red = []
selected_points_blue = []


# ----------------------------------------------------------------------- #
# Data handling functions #
# ----------------------------------------------------------------------- #

def highlight_selected_points():
    global selected_points_blue, selected_points_red, switch_state
    global actor2, actor1

    if switch_state == 0:
        mapper = actor2.GetMapper()
        selected_points = selected_points_blue
    else: 
        mapper = actor1.GetMapper()
        selected_points = selected_points_red

    actor_points = mapper.GetInput()
    colors = vtk.vtkUnsignedCharArray()
    colors.SetNumberOfComponents(3)
    colors.SetName("Colors")

    for i in range(actor_points.GetNumberOfPoints()):
        if i in selected_points:
            colors.InsertNextTuple([0, 255, 0])
        else:
            if switch_state == 0:
                colors.InsertNextTuple([0, 0, 255])
            else: 
                colors.InsertNextTuple([255, 0, 0])

    actor_points.GetPointData().SetScalars(colors)

def update_actors():
    global actor2, actor1, switch_button, point_cloud2, point_cloud1
    if switch_state == 0:
        renderer.RemoveActor(actor2)
        actor2 = create_point_cloud_actor(point_cloud2, [0, 0, 1])
        actor2.GetProperty().SetPointSize(5)
        renderer.AddActor(actor2)
    else:
        renderer.RemoveActor(actor1)
        actor1 = create_point_cloud_actor(point_cloud1, [1, 0, 0])
        actor1.GetProperty().SetPointSize(5)
        renderer.AddActor(actor1)
    render_window.Render()

def select_neighbors_within_radius(point_id, radius):
    global selected_points_blue, selected_points_red, point_cloud2, actor2, renderer, switch_state, point_cloud1, actor1

    if switch_state == 0:
        point_coords = point_cloud2[point_id]
        vtk_points = actor2.GetMapper().GetInput().GetPoints()
    else:
        point_coords = point_cloud1[point_id]
        vtk_points = actor1.GetMapper().GetInput().GetPoints()

    for i in range(vtk_points.GetNumberOfPoints()):
        if i == point_id:
            continue

        neighbor_coords = vtk_points.GetPoint(i)
        distance = np.linalg.norm(np.array(point_coords) - np.array(neighbor_coords))

        if distance <= radius:
            if switch_state == 0:
                selected_points_blue.append(i)
            else:
                selected_points_red.append(i)

    highlight_selected_points()
    render_window.Render()


def point_pick_callback(obj, event):
    global selected_points_blue, selected_points_red, point_picker, radius_slider, switch_state

    click_pos = render_window_interactor.GetEventPosition()
    point_picker.Pick(click_pos[0], click_pos[1], 0, renderer)
    selected_actor = point_picker.GetActor()

    if selected_actor:
        selected_point_id = point_picker.GetPointId()
        if switch_state == 0:
            if selected_point_id >= 0:
                if selected_point_id not in selected_points_blue:
                    selected_points_blue.append(selected_point_id)
                
                select_neighbors_within_radius(selected_point_id, radius_slider.GetValue())
                print(f"Selected points: {selected_points_blue}")
        else:
            if selected_point_id >= 0:
                if selected_point_id not in selected_points_red:
                    selected_points_red.append(selected_point_id)
                
                select_neighbors_within_radius(selected_point_id, radius_slider.GetValue())
                print(f"Selected points: {selected_points_red}")

# ----------------------------------------------------------------------- #
# Blue red switch button #
# ----------------------------------------------------------------------- #

def update_switch_state():
    global switch_state, switch_text_actor
    switch_state = (switch_state + 1) % 2
    if switch_state == 0:
        switch_text_actor.SetInput("Remove from: Blue")
    else:
        switch_text_actor.SetInput("Remove from: Red")
    switch_text_actor.Modified()
    print(f"Switched to: {'Blue' if switch_state == 0 else 'Red'}")

def switch_callback(obj, event):
    update_switch_state()

switch_button = vtk.vtkButtonWidget()
switch_button.SetInteractor(render_window_interactor)
switch_text_actor = vtk.vtkTextActor()
switch_text_actor.GetTextProperty().SetFontSize(12)
switch_text_actor.GetTextProperty().SetBackgroundColor(0.0, 0.0, 0.0)
switch_text_actor.SetPosition(0.7, 0.18)

switch_state = 0
switch_button_rep = vtk.vtkTexturedButtonRepresentation2D()
button_texture_off = vtk.vtkImageData()
button_texture_on = vtk.vtkImageData()

CreateButtonOff(button_texture_off)
CreateButtonOn(button_texture_on)

switch_button_rep.SetNumberOfStates(2)
switch_button_rep.SetButtonTexture(0, button_texture_off)
switch_button_rep.SetButtonTexture(1, button_texture_on)

switch_button.SetRepresentation(switch_button_rep)
switch_button.SetInteractor(render_window_interactor)
switch_button.SetRepresentation(switch_button_rep)
switch_button.AddObserver("StateChangedEvent", switch_callback)
switch_button.On()

update_switch_state()

# ----------------------------------------------------------------------- #
# Radius slider #
# ----------------------------------------------------------------------- #

def slider_callback(obj, event):
    global radius_slider, radius_text_actor
    radius = radius_slider.GetValue()
    radius_text_actor.SetTextScaleModeToNone()
    radius_text_actor.SetText(0, f"Radius: {radius}")
    radius_text_actor.Modified()

radius_slider = vtk.vtkSliderRepresentation2D()
radius_slider.SetMinimumValue(0)
radius_slider.SetMaximumValue(10)
radius_slider.SetValue(5)
radius_slider.GetPoint1Coordinate().SetCoordinateSystemToNormalizedDisplay()
radius_slider.GetPoint1Coordinate().SetValue(0.1, 0.1)
radius_slider.GetPoint2Coordinate().SetCoordinateSystemToNormalizedDisplay()
radius_slider.GetPoint2Coordinate().SetValue(0.4, 0.1)
radius_slider.SetSliderLength(0.02)
radius_slider.SetSliderWidth(0.03)
radius_slider.SetEndCapLength(0.01)
radius_slider.SetEndCapWidth(0.03)
radius_slider.SetTubeWidth(0.01)
radius_slider.SetLabelFormat("%0.1f")
radius_slider.SetTitleText("Radius")

slider_widget = vtk.vtkSliderWidget()
slider_widget.SetInteractor(render_window_interactor)
slider_widget.SetRepresentation(radius_slider)
slider_widget.KeyPressActivationOff()
slider_widget.On()

radius_text_actor = vtk.vtkTextActor()
radius_text_actor.GetTextProperty().SetFontSize(12)
radius_text_actor.GetTextProperty().SetColor(1.0, 1.0, 1.0)
radius_text_actor.GetTextProperty().SetBackgroundColor(0.0, 0.0, 0.0)
radius_text_actor.SetPosition(0.1, 0.18)

renderer.AddActor2D(radius_text_actor)

# ----------------------------------------------------------------------- #
# Point removal button #
# ----------------------------------------------------------------------- #

def remove_points_callback(obj, event):
    remove_selected_points()
    
    print(f"Removed selected points. Remaining points: {len(point_cloud2) if switch_state == 0 else len(point_cloud1)}")

def remove_selected_points():
    global selected_points_blue, selected_points_red, point_cloud2, point_cloud1

    if switch_state == 0:
        print(len(point_cloud2))
        point_cloud2 = np.delete(point_cloud2, selected_points_blue, axis=0)
        print(len(point_cloud2))
        update_actors()
    else:
        point_cloud1 = np.delete(point_cloud1, selected_points_red, axis=0)
        update_actors()

    selected_points_blue = []
    selected_points_red = []

remove_button = vtk.vtkTexturedButtonRepresentation2D()
remove_button.SetNumberOfStates(2)
button_texture_1 = vtk.vtkImageData()
button_texture_2 = vtk.vtkImageData()

CreateButtonOff(button_texture_1)
CreateButtonOn(button_texture_2)

remove_button.SetButtonTexture(0, button_texture_1)
remove_button.SetButtonTexture(1, button_texture_2)

remove_button_widget = vtk.vtkButtonWidget()
remove_button_widget.SetInteractor(render_window_interactor)
remove_button_widget.SetRepresentation(remove_button)
remove_button_widget.AddObserver("StateChangedEvent", remove_points_callback)

render_window.Render()


upperRight = vtk.vtkCoordinate()
upperRight.SetCoordinateSystemToNormalizedDisplay()
upperRight.SetValue(1.0, 1.0)

bds = [0] * 6
sz = 50.0
bds[0] = upperRight.GetComputedDisplayValue(renderer)[0] - sz
bds[1] = bds[0] + sz
bds[2] = upperRight.GetComputedDisplayValue(renderer)[1] - sz
bds[3] = bds[2] + sz
bds[4] = bds[5] = 0.0

remove_button_text_actor = vtk.vtkTextActor()
remove_button_text_actor.GetTextProperty().SetFontSize(12)
remove_button_text_actor.GetTextProperty().SetColor(1.0, 1.0, 1.0)
remove_button_text_actor.GetTextProperty().SetBackgroundColor(0.0, 0.0, 0.0)
remove_button_text_actor.SetPosition(3, 3)

renderer.AddActor2D(radius_text_actor)
renderer.AddActor2D(remove_button_text_actor)

remove_button.SetPlaceFactor(1)
remove_button.PlaceWidget(bds)
remove_button_widget.On()

# ----------------------------------------------------------------------- #
# Clear selection button #
# ----------------------------------------------------------------------- #
def clear_selection_callback(obj, event):
    global selected_points_blue, selected_points_red, actor1, actor2

    selected_points_blue = []
    selected_points_red = []
    highlight_selected_points()

# Create a VTK button widget for clearing the selection
clear_button_rep = vtk.vtkTexturedButtonRepresentation2D()
button_texture_off_clear = vtk.vtkImageData()
button_texture_on_clear = vtk.vtkImageData()
CreateButtonOff(button_texture_off_clear)
CreateButtonOn(button_texture_on_clear)

clear_button_rep.SetNumberOfStates(2)
clear_button_rep.SetButtonTexture(0, button_texture_off_clear)
clear_button_rep.SetButtonTexture(1, button_texture_on_clear)

# Position the clear button in the bottom-right corner
buttomRight = vtk.vtkCoordinate()
buttomRight.SetCoordinateSystemToNormalizedDisplay()
buttomRight.SetValue(1.0, 0.0)

bds_clear = [0] * 6
sz = 50.0
bds_clear[0] = buttomRight.GetComputedDisplayValue(renderer)[0] + sz
bds_clear[1] = bds_clear[0] + sz
bds_clear[2] = buttomRight.GetComputedDisplayValue(renderer)[1] - sz
bds_clear[3] = bds_clear[2] + sz
bds_clear[4] = bds_clear[5] = 0.0


# Create the clear button widget
clear_button_widget = vtk.vtkButtonWidget()
clear_button_widget.SetInteractor(render_window_interactor)
clear_button_widget.SetRepresentation(clear_button_rep)

# Connect the callback function to the clear button
clear_button_widget.AddObserver("StateChangedEvent", clear_selection_callback)
clear_button_rep.SetPlaceFactor(1)
clear_button_rep.PlaceWidget(bds_clear)
clear_button_widget.On()

# ----------------------------------------------------------------------- #
# Save point clouds button #
# ----------------------------------------------------------------------- #
# Function to fuse two point clouds
def fuse_point_clouds(point_cloud1, point_cloud2):
    # Combine the two point clouds (assumes the point clouds have the same format)
    fused_point_cloud = np.concatenate((point_cloud1, point_cloud2), axis=0)
    return fused_point_cloud

# Function to save a point cloud to a text file
def save_point_cloud_to_file(point_cloud, file_path):
    np.savetxt(file_path, point_cloud, fmt='%f %f %f')

# Callback function for the new button to save fused point clouds
def new_button_callback(obj, event):
    global point_cloud1, point_cloud2

    # Fuse the two point clouds
    fused_point_cloud = fuse_point_clouds(point_cloud1, point_cloud2)

    # Save the fused point cloud to a text file
    save_point_cloud_to_file(fused_point_cloud, "workflow_processed_data_output/fused_point_cloud.txt")

    print("Fused point clouds saved to 'fused_point_cloud.txt'.")

# Position the new button in the top-left corner
bds_new = [0] * 6
sz_new = 50.0
bds_new[0] = 20  # Adjust the X-coordinate for the top-left corner
bds_new[1] = bds_new[0] + sz_new
bds_new[2] = render_window.GetSize()[1] - 70  # Adjust the Y-coordinate for the top-left corner
bds_new[3] = bds_new[2] + sz_new
bds_new[4] = bds_new[5] = 0.0

# Create a VTK button representation for the new button
new_button_rep = vtk.vtkTexturedButtonRepresentation2D()
button_texture_off_new = vtk.vtkImageData()
button_texture_on_new = vtk.vtkImageData()
CreateButtonOff(button_texture_off_new)
CreateButtonOn(button_texture_on_new)

new_button_rep.SetNumberOfStates(2)
new_button_rep.SetButtonTexture(0, button_texture_off_new)
new_button_rep.SetButtonTexture(1, button_texture_on_new)
# Place the new button widget
new_button_rep.SetPlaceFactor(1)
new_button_rep.PlaceWidget(bds_new)

new_button_widget = vtk.vtkButtonWidget()
new_button_widget.SetInteractor(render_window_interactor)
new_button_widget.SetRepresentation(new_button_rep)
# Connect the callback function to the new button
new_button_widget.AddObserver("StateChangedEvent", new_button_callback)
new_button_widget.On()


render_window_interactor.Start()

