import cv2
import numpy as np
from skimage.segmentation import active_contour
from skimage.draw import polygon_perimeter

# Variables for mouse event handling
drawing = False
points = []
drawing_polygon = False
snake_initialized = False

def on_mouse(event, x, y, flags, param):
    global drawing, points, drawing_polygon, snake_initialized

    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        points.append((x, y))

    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        drawing_polygon = True

    elif event == cv2.EVENT_MOUSEMOVE:
        if drawing:
            img_copy = img.copy()
            cv2.polylines(img_copy, [np.array(points + [(x, y)])], isClosed=False, color=(255, 255, 255), thickness=2)
            cv2.imshow('Image', img_copy)

# Read an image
img = cv2.imread('experimental/Test_live_wire.JPG')
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.namedWindow('Image')
cv2.setMouseCallback('Image', on_mouse)

while True:
    img_copy = img.copy()

    if drawing_polygon:
        # Draw the polygon
        if len(points) > 1:
            cv2.polylines(img_copy, [np.array(points)], isClosed=False, color=(255, 255, 255), thickness=2)

    cv2.imshow('Image', img_copy)
    key = cv2.waitKey(1) & 0xFF

    if key == ord('q'):
        break

    elif key == ord('s') and drawing_polygon:
        # Perform active contour segmentation
        snake = np.array(points)
        init = np.array(list(zip(snake[:, 1], snake[:, 0]))).reshape((-1, 2))
        snake = active_contour(img_gray, init, alpha=0.1, beta=1.0, gamma=0.01)

        # Draw the active contour on the image
        rr, cc = polygon_perimeter(np.round(snake[:, 1]).astype(int), np.round(snake[:, 0]).astype(int), shape=img.shape[:2])
        img_copy[rr, cc] = [255, 255, 255]
        
        cv2.imshow('Active Contour Result', img_copy)
        cv2.waitKey(0)  # Wait until any key is pressed to continue

        drawing_polygon = False
        snake_initialized = True

cv2.destroyAllWindows()
